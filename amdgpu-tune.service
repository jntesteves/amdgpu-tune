# SPDX-License-Identifier: Unlicense
[Service]
# Use the following environment variables to tune the settings.
# All settings are optional.

# On multi-GPU systems (e.g. a laptop with AMD/AMD hybrid-graphics) you must set DEVICE
# to the Device ID of the dGPU.
#
# Example: DEVICE=73df
#
Environment=DEVICE=73df

# Set the minimum and maximum core clocks in MHz.
# This setting is not supported on mobile GPUs.
#
# Example: CORE_CLOCK_MAX=2500
#
Environment=CORE_CLOCK_MIN=
Environment=CORE_CLOCK_MAX=

# Set the minimum and maximum memory clocks in MHz.
# This setting is not supported on mobile GPUs.
#
# Note that the actual memory controller clock rate are exposed, not
# the effective memory clock of the DRAMs. To translate it, use the
# formulas documented on the amdgpu kernel driver.
#
# Example: MEMORY_CLOCK_MAX=1000
#
Environment=MEMORY_CLOCK_MIN=
Environment=MEMORY_CLOCK_MAX=

# Set a voltage offset in mV.
# Undervolting reduces power consumption and heat generation and can improve performance.
# This setting is not supported on GPUs older than RDNA2/RX 6000 series.
#
# Example: VOLTAGE_OFFSET=-50
#
Environment=VOLTAGE_OFFSET=

# Set a frequency/voltage curve in <MHz, mV>.
# Three <frequency, voltage> points that can be used to calibrate the core voltage curve.
# This setting is not supported on mobile GPUs.
#
# Example: VDDC_CURVE_0='300 600'
#          VDDC_CURVE_1='1200 800'
#          VDDC_CURVE_2='2300 1000'
#
Environment=VDDC_CURVE_0=
Environment=VDDC_CURVE_1=
Environment=VDDC_CURVE_2=



###############################################
### Do NOT change anything bellow this line ###
###############################################

Type=oneshot
RemainAfterExit=yes

# We can just embed the whole script in the service unit to avoid dependency on another file.
ExecStart=sh -c 'CARD=/sys/class/drm/card0; \
    for d in $(find /sys/class/drm/ -name card?); do \
        [ "${DEVICE}" ] && [ "0x${DEVICE}" = "$(cat $d/device/device)" ] && \
        CARD="$d" && printf "Selected device at $d\\n"; \
    done; \
    printf "Setting manual power management: \\"manual\\" >$CARD/device/power_dpm_force_performance_level \\n" && \
        printf "manual\\n" >$CARD/device/power_dpm_force_performance_level; \
    [ "${CORE_CLOCK_MIN}" ] && \
        printf "Setting minimum core clock: \\"s 0 ${CORE_CLOCK_MIN}\\" >$CARD/device/pp_od_clk_voltage\\n" \
        && printf "s 0 ${CORE_CLOCK_MIN}\\n" >$CARD/device/pp_od_clk_voltage; \
    [ "${CORE_CLOCK_MAX}" ] && \
        printf "Setting maximum core clock: \\"s 1 ${CORE_CLOCK_MAX}\\" >$CARD/device/pp_od_clk_voltage\\n" \
        && printf "s 1 ${CORE_CLOCK_MAX}\\n" >$CARD/device/pp_od_clk_voltage; \
    [ "${MEMORY_CLOCK_MIN}" ] && \
        printf "Setting minimum core clock: \\"m 0 ${MEMORY_CLOCK_MIN}\\" >$CARD/device/pp_od_clk_voltage\\n" \
        && printf "m 0 ${MEMORY_CLOCK_MIN}\\n" >$CARD/device/pp_od_clk_voltage; \
    [ "${MEMORY_CLOCK_MAX}" ] && \
        printf "Setting maximum core clock: \\"m 1 ${MEMORY_CLOCK_MAX}\\" >$CARD/device/pp_od_clk_voltage\\n" \
        && printf "m 1 ${MEMORY_CLOCK_MAX}\\n" >$CARD/device/pp_od_clk_voltage; \
    [ "${VDDC_CURVE_0}" ] && \
        printf "Setting voltage offset: \\"vc 0 ${VDDC_CURVE_0}\\" >$CARD/device/pp_od_clk_voltage\\n" \
        && printf "vc 0 ${VDDC_CURVE_0}\\n" >$CARD/device/pp_od_clk_voltage; \
    [ "${VDDC_CURVE_1}" ] && \
        printf "Setting voltage offset: \\"vc 1 ${VDDC_CURVE_1}\\" >$CARD/device/pp_od_clk_voltage\\n" \
        && printf "vc 1 ${VDDC_CURVE_1}\\n" >$CARD/device/pp_od_clk_voltage; \
    [ "${VDDC_CURVE_2}" ] && \
        printf "Setting voltage offset: \\"vc 2 ${VDDC_CURVE_2}\\" >$CARD/device/pp_od_clk_voltage\\n" \
        && printf "vc 2 ${VDDC_CURVE_2}\\n" >$CARD/device/pp_od_clk_voltage; \
    [ "${VOLTAGE_OFFSET}" ] && \
        printf "Setting voltage offset: \\"vo ${VOLTAGE_OFFSET}\\" >$CARD/device/pp_od_clk_voltage\\n" \
        && printf "vo ${VOLTAGE_OFFSET}\\n" >$CARD/device/pp_od_clk_voltage; \
    printf "Committing changes: \\"c\\" >$CARD/device/pp_od_clk_voltage \\n" && \
        printf "c\\n" >$CARD/device/pp_od_clk_voltage; \
    printf "Setting automatic power management: \\"auto\\" >$CARD/device/power_dpm_force_performance_level \\n" && \
        printf "auto\\n" >$CARD/device/power_dpm_force_performance_level;'

# Revert the changes on service stop.
ExecStop=sh -c 'CARD=/sys/class/drm/card0; \
    for d in $(find /sys/class/drm/ -name card?); do \
        [ "${DEVICE}" ] && [ "0x${DEVICE}" = "$(cat $d/device/device)" ] && \
        CARD="$d" && printf "Selected device at $d\\n"; \
    done; \
    printf "Reverting changes: \\"r\\" >$CARD/device/pp_od_clk_voltage \\n" && \
        printf "r\\n" >$CARD/device/pp_od_clk_voltage; \
    printf "Setting automatic power management: \\"auto\\" >$CARD/device/power_dpm_force_performance_level \\n" && \
        printf "auto\\n" >$CARD/device/power_dpm_force_performance_level;'

[Unit]
Description=Tune performance of AMD GPU
After=default.target modprobe@amdgpu.service
Wants=modprobe@amdgpu.service

[Install]
WantedBy=default.target
